name: Test, Build, and Deploy CSharpSampleCRUDTest.NET APP

on:
  push:
    branches: 
    - "master"
    - "develop"

env:
  CSharpSampleCRUDTest_image: '${{ secrets.DOCKER_HUB_USERNAME }}/CSharpSampleCRUDTest'
  
jobs:
  build:

    runs-on: ubuntu-latest


    env:
      MONGODB_CONNECTION_STRING: ${{ secrets.MONGODB_CONNECTION_STRING }}
      MONGODB_DATABASE_NAME: ${{ secrets.MONGODB_DATABASE_NAME }}
      MONGODB_COLLECTION_NAME: ${{ secrets.MONGODB_COLLECTION_NAME }}
      API_BASE_ADDRESS: ${{ secrets.API_BASE_ADDRESS }}

    services:
      mongo:
        image: mongo:latest
        ports:
          - "27018:27017"
        options: >-
          --health-cmd "pgrep mongod" 
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.x
    
    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Wait for MongoDB to become available
      run: |
        # Wait until MongoDB service is up and running
        for i in {1..10}; do
        if mongo --eval "db.runCommand({ connectionStatus: 1 })" > /dev/null 2>&1; then
            echo "MongoDB is up and running"
            break
        fi
        echo "Waiting for MongoDB to be ready..."
        sleep 5
        done

    - name: Test
      run: dotnet test --no-build --verbosity normal



    - name: Build Docker Image
      run: docker build -t csharpsamplecrudtest .

    - name: change image tag
      run: docker tag csharpsamplecrudtest $CSharpSampleCRUDTest_image

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Docker Push
      run: docker push $CSharpSampleCRUDTest_image
    
